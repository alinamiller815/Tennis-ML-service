import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime, timedelta

# –ë–∞–∑–æ–≤—ã–π URL API
API_URL = "http://localhost:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π",
    page_icon="üéæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø-100 —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–∞—Ö
def get_top_players():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–ø-100 —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–æ–≤"""
    return {
        "–Ø–Ω–Ω–∏–∫ –°–∏–Ω–Ω–µ—Ä": {
            "rank": 1, "age": 22.8, "height": 188,
            "hand": "right", "wins": 48, "losses": 7
        },
        "–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á": {
            "rank": 2, "age": 36.7, "height": 188,
            "hand": "right", "wins": 42, "losses": 10
        },
        "–ö–∞—Ä–ª–æ—Å –ê–ª—å–∫–∞—Ä–∞—Å": {
            "rank": 3, "age": 20.9, "height": 183,
            "hand": "right", "wins": 45, "losses": 8
        },
        "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ó–≤–µ—Ä–µ–≤": {
            "rank": 4, "age": 27.1, "height": 198, 
            "hand": "right", "wins": 38, "losses": 15
        },
        "–î–∞–Ω–∏–∏–ª –ú–µ–¥–≤–µ–¥–µ–≤": {
            "rank": 5, "age": 28.2, "height": 198,
            "hand": "right", "wins": 40, "losses": 14
        },
        "–ê–Ω–¥—Ä–µ–π –†—É–±–ª–µ–≤": {
            "rank": 6, "age": 26.5, "height": 188,
            "hand": "right", "wins": 36, "losses": 16
        },
        "–•—É–±–µ—Ä—Ç –•—É—Ä–∫–∞—á": {
            "rank": 7, "age": 27.2, "height": 196,
            "hand": "right", "wins": 32, "losses": 18
        },
        "–ö–∞—Å–ø–µ—Ä –†—É—É–¥": {
            "rank": 8, "age": 25.4, "height": 183,
            "hand": "right", "wins": 34, "losses": 17
        },
        "–ê–ª–µ–∫—Å –î–µ –ú–∏–Ω–∞—É—Ä": {
            "rank": 9, "age": 25.3, "height": 183,
            "hand": "right", "wins": 31, "losses": 19
        },
        "–ì—Ä–∏–≥–æ—Ä –î–∏–º–∏—Ç—Ä–æ–≤": {
            "rank": 10, "age": 32.9, "height": 191,
            "hand": "right", "wins": 29, "losses": 21
        },
        "–°—Ç–µ—Ñ–∞–Ω–æ—Å –¶–∏—Ü–∏–ø–∞—Å": {
            "rank": 11, "age": 25.8, "height": 193,
            "hand": "right", "wins": 33, "losses": 18
        },
        "–¢–æ–º–º–∏ –ü–æ–ª": {
            "rank": 12, "age": 27.1, "height": 185,
            "hand": "right", "wins": 28, "losses": 22
        },
        "–¢–µ–π–ª–æ—Ä –§—Ä–∏—Ü": {
            "rank": 13, "age": 26.6, "height": 193,
            "hand": "right", "wins": 32, "losses": 19
        },
        "–ë–µ–Ω –®–µ–ª—Ç–æ–Ω": {
            "rank": 14, "age": 21.5, "height": 193,
            "hand": "left", "wins": 29, "losses": 21
        },
        "–•–æ–ª–≥–µ—Ä –†—É–Ω–µ": {
            "rank": 15, "age": 21.1, "height": 188,
            "hand": "right", "wins": 30, "losses": 20
        },
        "–§–µ–ª–∏–∫—Å –û–∂–µ-–ê–ª—å—è—Å—Å–∏–º": {
            "rank": 16, "age": 23.9, "height": 193,
            "hand": "right", "wins": 28, "losses": 22
        },
        "–°–µ–±–∞—Å—Ç—å—è–Ω –ö–æ—Ä–¥–∞": {
            "rank": 17, "age": 23.8, "height": 196,
            "hand": "right", "wins": 27, "losses": 23
        },
        "–õ–æ—Ä–µ–Ω—Ü–æ –ú—É–∑–µ—Ç—Ç–∏": {
            "rank": 18, "age": 22.3, "height": 185,
            "hand": "right", "wins": 26, "losses": 24
        },
        "–ù–∏–∫–æ–ª–∞—Å –•–∞—Ä—Ä–∏": {
            "rank": 19, "age": 28.5, "height": 198,
            "hand": "right", "wins": 25, "losses": 25
        },
        "–ö–∞—Ä–µ–Ω –•–∞—á–∞–Ω–æ–≤": {
            "rank": 20, "age": 28.1, "height": 198,
            "hand": "right", "wins": 27, "losses": 23
        },
        "–§—Ä—ç–Ω—Å–∏—Å –¢–∏–∞—Ñ–æ": {
            "rank": 21, "age": 26.2, "height": 188,
            "hand": "right", "wins": 26, "losses": 24
        },
        "–£–≥–æ –£–º–±–µ—Ä": {
            "rank": 22, "age": 25.8, "height": 191,
            "hand": "left", "wins": 24, "losses": 26
        },
        "–ê–∫–∏—Ä–∞ –°–∞–Ω—Ç–∏–ª–ª–∞–Ω": {
            "rank": 23, "age": 27.1, "height": 185,
            "hand": "right", "wins": 23, "losses": 27
        },
        "–ê–¥—Ä–∏–∞–Ω –ú–∞–Ω–Ω–∞—Ä–∏–Ω–æ": {
            "rank": 24, "age": 35.9, "height": 180,
            "hand": "left", "wins": 22, "losses": 28
        },
        "–§—Ä–∞–Ω—á–µ—Å–∫–æ –ü–∞—Å—Å–∞—Ä–æ": {
            "rank": 25, "age": 22.6, "height": 188,
            "hand": "right", "wins": 21, "losses": 29
        },
        "–ú–∞—Ä—Ç–æ–Ω –§—É—á–æ–≤–∏—á": {
            "rank": 26, "age": 32.3, "height": 188,
            "hand": "right", "wins": 20, "losses": 30
        },
        "–§–∞–±–∏–æ –§–æ–Ω—å–∏–Ω–∏": {
            "rank": 27, "age": 37.0, "height": 178,
            "hand": "right", "wins": 19, "losses": 31
        },
        "–î–∂–µ–∫ –î—Ä–µ–π–ø–µ—Ä": {
            "rank": 28, "age": 22.4, "height": 193,
            "hand": "left", "wins": 23, "losses": 27
        },
        "–ë–æ—Ä–Ω–∞ –ß–æ—Ä–∏—á": {
            "rank": 29, "age": 27.6, "height": 188,
            "hand": "right", "wins": 22, "losses": 28
        },
        "–ñ–µ—Ä–µ–º–∏ –®–∞—Ä–¥–∏": {
            "rank": 30, "age": 37.2, "height": 183,
            "hand": "right", "wins": 18, "losses": 32
        },
        "–ê—Ä—Ç—É—Ä –§–∏–ª—Å": {
            "rank": 31, "age": 19.8, "height": 191,
            "hand": "right", "wins": 26, "losses": 24
        },
        "–ú–∞—Ä–∏–Ω –ß–∏–ª–∏—á": {
            "rank": 32, "age": 35.5, "height": 198,
            "hand": "right", "wins": 17, "losses": 33
        },
        "–î–µ–Ω–∏—Å –®–∞–ø–æ–≤–∞–ª–æ–≤": {
            "rank": 33, "age": 25.1, "height": 185,
            "hand": "left", "wins": 21, "losses": 29
        },
        "–Ø–Ω-–õ–µ–Ω–Ω–∞—Ä–¥ –®—Ç—Ä—É—Ñ—Ñ": {
            "rank": 34, "age": 34.0, "height": 193,
            "hand": "right", "wins": 20, "losses": 30
        },
        "–ü–∞–±–ª–æ –ö–∞—Ä—Ä–µ–Ω–æ –ë—É—Å—Ç–∞": {
            "rank": 35, "age": 32.8, "height": 188,
            "hand": "right", "wins": 19, "losses": 31
        },
        "–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å": {
            "rank": 287, "age": 37.9, "height": 185,
            "hand": "left", "wins": 8, "losses": 4
        },
        "–†–æ–¥–∂–µ—Ä –§–µ–¥–µ—Ä–µ—Ä": {
            "rank": None, "age": 42.8, "height": 185,
            "hand": "right", "wins": 0, "losses": 0
        },
        "–≠–Ω–¥–∏ –ú–∞—Ä—Ä–µ–π": {
            "rank": 512, "age": 37.0, "height": 191,
            "hand": "right", "wins": 5, "losses": 7
        },
        "–î–æ–º–∏–Ω–∏–∫ –¢–∏–º": {
            "rank": 98, "age": 30.5, "height": 185,
            "hand": "right", "wins": 15, "losses": 35
        },
        "–ù–∏–∫ –ö–∏—Ä—å–æ—Å": {
            "rank": 116, "age": 29.1, "height": 193,
            "hand": "right", "wins": 12, "losses": 8
        },
        "–°—Ç—ç–Ω –í–∞–≤—Ä–∏–Ω–∫–∞": {
            "rank": 67, "age": 39.2, "height": 183,
            "hand": "right", "wins": 18, "losses": 32
        },
        "–ö–µ–∏ –ù–∏—Å–∏–∫–æ—Ä–∏": {
            "rank": 355, "age": 34.4, "height": 180,
            "hand": "right", "wins": 6, "losses": 10
        },
        "–•—É–∞–Ω –ú–∞—Ä—Ç–∏–Ω –¥–µ–ª—å –ü–æ—Ç—Ä–æ": {
            "rank": None, "age": 35.7, "height": 198,
            "hand": "right", "wins": 0, "losses": 0
        },
        "–ì–∞—ç–ª—å –ú–æ–Ω—Ñ–∏—Å": {
            "rank": 46, "age": 37.7, "height": 193,
            "hand": "right", "wins": 19, "losses": 31
        },
        "–ñ–æ-–í–∏–ª—Ñ—Ä–∏–¥ –¶–æ–Ω–≥–∞": {
            "rank": None, "age": 39.1, "height": 188,
            "hand": "right", "wins": 0, "losses": 0
        },
        "–î–∂–æ–Ω –ò–∑–Ω–µ—Ä": {
            "rank": None, "age": 39.0, "height": 208,
            "hand": "right", "wins": 0, "losses": 0
        },
        # –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–≥—Ä–æ–∫–æ–≤...
    }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
def login(email, password):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.post(
            f"{API_URL}/users/login",
            json={"email": email, "password": password}
        )
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def register(name, email, password):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.post(
            f"{API_URL}/users/register",
            json={ "name": name, "email": email, "password": password}
        )
        if response.status_code == 201:
            return response.json()
        else:
            if response.status_code == 400:
                st.error(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def get_user_info(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(f"{API_URL}/users/me", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def get_models(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(f"{API_URL}/models", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return []

def get_predictions(token):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(f"{API_URL}/predictions", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return []

def get_prediction(token, prediction_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ ID"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.get(f"{API_URL}/predictions/{prediction_id}", headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def make_prediction(token, prediction_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print(f"–¢–æ–∫–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {token}")
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    try:
        response = requests.post(
            f"{API_URL}/predictions",
            headers=headers,
            json=prediction_data
        )
        if response.status_code == 201:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def add_funds(token, amount):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(
            f"{API_URL}/users/add-funds?amount={amount}",
            headers=headers
        )
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

def create_model(token, model_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    headers = {"Authorization": f"Bearer {token}"}
    try:
        response = requests.post(
            f"{API_URL}/models",
            headers=headers,
            json=model_data
        )
        if response.status_code == 201:
            return response.json()
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def display_prediction_results(result, player1_name, player2_name):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    
    p1_prob = result["results"]["player1_win_probability"] * 100
    p2_prob = result["results"]["player2_win_probability"] * 100
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    cols = st.columns([2, 1, 2])
    with cols[0]:
        st.metric(
            label=f"{player1_name}",
            value=f"{p1_prob:.1f}%",
            delta=f"{p1_prob - 50:.1f}%" if p1_prob > 50 else f"{p1_prob - 50:.1f}%"
        )
    
    with cols[1]:
        st.info(f"VS")
    
    with cols[2]:
        st.metric(
            label=f"{player2_name}",
            value=f"{p2_prob:.1f}%",
            delta=f"{p2_prob - 50:.1f}%" if p2_prob > 50 else f"{p2_prob - 50:.1f}%"
        )
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    chart_data = pd.DataFrame({
        "–ò–≥—Ä–æ–∫": [player1_name, player2_name],
        "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã (%)": [p1_prob, p2_prob]
    })
    st.bar_chart(chart_data.set_index("–ò–≥—Ä–æ–∫"))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    winner_color = "green" if result["results"]["confidence"] > 0.7 else "orange"
    st.markdown(
        f"<div style='padding: 10px; background-color: #f0f8ff; border-radius: 5px;'>"
        f"<h3 style='margin: 0;'>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:</h3>"
        f"<h2 style='margin: 10px 0; color: {winner_color};'>{result['results']['predicted_winner']}</h2>"
        f"<p>—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {result['results']['confidence']*100:.1f}%</p>"
        f"</div>",
        unsafe_allow_html=True
    )

# –°—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    st.title("üéæ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
    
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    # –í–∫–ª–∞–¥–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
    with tab1:
        with st.form("login_form"):
            st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            email = st.text_input("Email", placeholder="example@mail.com")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
            submit = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submit:
                if email and password:
                    result = login(email, password)
                    if result:
                        st.session_state.token = result["access_token"]
                        print(f"–¢–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {st.session_state.token}")
                        st.session_state.logged_in = True
                        st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                        st.session_state.current_page = "dashboard"
                        st.experimental_rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    with tab2:
        with st.form("register_form"):
            st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            name = st.text_input("–ò–º—è")
            email = st.text_input("Email", placeholder="example@mail.com", key="reg_email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password")
            password_confirm = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
            submit = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if submit:
                if name and email and password and password == password_confirm:
                    result = register(name, email, password)
                    if result:
                        st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                else:
                    if password != password_confirm:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    else:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    st.markdown("---")
    st.info("–ï—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: \n\n Email: test@example.com \n\n –ü–∞—Ä–æ–ª—å: password123")

def dashboard_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞"""
    st.header("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    predictions = get_predictions(st.session_state.token)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_user_info(st.session_state.token)
    
    # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions) if predictions else 0}")
    with col2:
        st.info(f"–ë–∞–ª–∞–Ω—Å: {user_info['balance']} –µ–¥.")
    with col3:
        recent_preds = len([p for p in predictions if datetime.fromisoformat(p["created_at"].replace("Z", "+00:00")) > (datetime.now() - timedelta(days=7))]) if predictions else 0
        st.info(f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_preds}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
    if not predictions:
        st.warning("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ!")
        if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            st.session_state.current_page = "new_prediction"
            st.experimental_rerun()
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        sorted_preds = sorted(predictions, key=lambda p: p["created_at"], reverse=True)[:5]
        
        for pred in sorted_preds:
            match = f"{pred['input_data']['player1_name']} vs {pred['input_data']['player2_name']}"
            winner = pred["results"]["predicted_winner"]
            confidence = pred["results"]["confidence"] * 100
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            created_at = datetime.fromisoformat(pred["created_at"].replace("Z", "+00:00"))
            formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
            
            with st.expander(f"{match} ({formatted_date})"):
                st.write(f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}")
                st.write(f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.1f}%")
                st.write(f"**–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞:** {pred['input_data']['surface']}")
                
                if st.button("–î–µ—Ç–∞–ª–∏", key=f"details_{pred['id']}"):
                    st.session_state.selected_prediction_id = pred["id"]
                    st.session_state.current_page = "prediction_history"
                    st.experimental_rerun()
    
    # –ë–ª–æ–∫ "–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞"
    st.subheader("–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑"):
        st.session_state.current_page = "new_prediction"
        st.experimental_rerun()

def new_prediction_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    st.header("–ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    models = get_models(st.session_state.token)
    if not models:
        st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
        return
    
    # –ë–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    with st.expander("–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", expanded=False):
        st.write("""
        1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–º –∏–≥—Ä–æ–∫–µ
        3. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—Ç–æ—Ä–æ–º –∏–≥—Ä–æ–∫–µ
        4. –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
        """)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–ø –∏–≥—Ä–æ–∫–∞—Ö
    player_templates = get_top_players()
    
    # –§–æ—Ä–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    tab1, tab2, tab3 = st.tabs(["–ú–æ–¥–µ–ª—å", "–ò–≥—Ä–æ–∫–∏", "–ú–∞—Ç—á"])
    
    # –í–∫–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    with tab1:
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        
        model_options = {model["name"]: model["id"] for model in models}
        model_costs = {model["name"]: model["cost"] for model in models}
        
        # –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
        selected_model_name = st.radio(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:",
            options=list(model_options.keys())
        )
        
        # –ù–∞–π–¥–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        selected_model = next((m for m in models if m["name"] == selected_model_name), None)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if selected_model:
            st.info(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {selected_model['cost']} –µ–¥.")
            if "description" in selected_model:
                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {selected_model['description']}")
            if "accuracy" in selected_model:
                st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:** {selected_model.get('accuracy', 0.8)*100:.1f}%")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            model_descriptions = {
                "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–Ω–≥, —Ä—É–∫–∞, –ø–æ–∫—Ä—ã—Ç–∏–µ). –¢–æ—á–Ω–æ—Å—Ç—å ~60-65%.",
                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å": "–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–±–µ–¥. –¢–æ—á–Ω–æ—Å—Ç—å ~70-75%.",
                "–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å": "–£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª—é—á–∞—è –∏—Å—Ç–æ—Ä–∏—é –º–∞—Ç—á–µ–π. –¢–æ—á–Ω–æ—Å—Ç—å ~80-85%."
            }
            
            model_type = selected_model_name.split()[0].lower() + " " + selected_model_name.split()[1].lower() 
            if "description" not in selected_model and model_type in model_descriptions:
                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {model_descriptions[model_type]}")
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    if "player1_data" not in st.session_state:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –°–∏–Ω–Ω–µ—Ä
        default_player1 = "–Ø–Ω–Ω–∏–∫ –°–∏–Ω–Ω–µ—Ä"
        st.session_state.player1_data = player_templates[default_player1].copy()
        st.session_state.player1_data["name"] = default_player1
    
    if "player2_data" not in st.session_state:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ê–ª—å–∫–∞—Ä–∞—Å  
        default_player2 = "–ö–∞—Ä–ª–æ—Å –ê–ª—å–∫–∞—Ä–∞—Å"
        st.session_state.player2_data = player_templates[default_player2].copy()
        st.session_state.player2_data["name"] = default_player2
    
    # –í–∫–ª–∞–¥–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    with tab2:
        st.subheader("–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤")
        
        col1, col2 = st.columns(2)
        
        # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
        with col1:
            st.markdown("### –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫")
            
            # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
            player1_search = st.text_input("–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞", key="player1_search")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
            filtered_players1 = [p for p in player_templates.keys() 
                                if player1_search.lower() in p.lower()] if player1_search else list(player_templates.keys())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            sorted_players1 = sorted(filtered_players1, 
                                    key=lambda p: player_templates[p].get("rank", 1000) if player_templates[p].get("rank") is not None else 1000)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            # player_options1 = ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"] + sorted_players1[:30]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ 30 –∏–≥—Ä–æ–∫–æ–≤
            st.write(f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —à–∞–±–ª–æ–Ω–∞—Ö: {len(player_templates)}")
            st.write(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(sorted_players1)}")
            player_options1 = ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"] + sorted_players1
            # –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
            player1_template = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É)",
                options=player_options1,
                key="player1_select"
            )
            
            if player1_template != "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                temp_data = player_templates[player1_template].copy()
                temp_data["name"] = player1_template
                st.session_state.player1_data = temp_data
                player1_name = player1_template
            else:
                player1_name = st.text_input(
                    "–ò–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
                    value=st.session_state.player1_data.get("name", "")
                )
                st.session_state.player1_data["name"] = player1_name
            
            # –§–æ—Ä–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player1_rank = st.number_input(
                "–†–µ–π—Ç–∏–Ω–≥", min_value=1, max_value=1000, 
                value=st.session_state.player1_data["rank"]
            )
            player1_age = st.number_input(
                "–í–æ–∑—Ä–∞—Å—Ç", min_value=15.0, max_value=50.0, 
                value=st.session_state.player1_data["age"]
            )
            player1_height = st.number_input(
                "–†–æ—Å—Ç (—Å–º)", min_value=150, max_value=220,
                value=st.session_state.player1_data["height"]
            )
            player1_hand = st.selectbox(
                "–ò–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞", options=["right", "left"],
                index=0 if st.session_state.player1_data["hand"] == "right" else 1
            )
            player1_wins = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –∑–∞ –≥–æ–¥", min_value=0, max_value=100,
                value=st.session_state.player1_data["wins"]
            )
            player1_losses = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –≥–æ–¥", min_value=0, max_value=100,
                value=st.session_state.player1_data["losses"]
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            st.session_state.player1_data.update({
                "rank": player1_rank,
                "age": player1_age,
                "height": player1_height,
                "hand": player1_hand,
                "wins": player1_wins,
                "losses": player1_losses
            })
        
        # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–µ—Ä–≤–æ–º—É
        with col2:
            st.markdown("### –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫")
            
            # –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞
            player2_search = st.text_input("–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞", key="player2_search")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
            filtered_players2 = [p for p in player_templates.keys() 
                                if player2_search.lower() in p.lower()] if player2_search else list(player_templates.keys())
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            sorted_players2 = sorted(filtered_players2, 
                                    key=lambda p: player_templates[p].get("rank", 1000) if player_templates[p].get("rank") is not None else 1000)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            # player_options2 = ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"] + sorted_players2[:30]
            st.write(f"–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —à–∞–±–ª–æ–Ω–∞—Ö: {len(player_templates)}")
            st.write(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(sorted_players1)}")
            player_options2 = ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"] + sorted_players2
            
            player2_template = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É)",
                options=player_options2,
                key="player2_select"
            )
            
            if player2_template != "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                temp_data = player_templates[player2_template].copy()
                temp_data["name"] = player2_template
                st.session_state.player2_data = temp_data
                player2_name = player2_template
            else:
                player2_name = st.text_input(
                    "–ò–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞", 
                    value=st.session_state.player2_data.get("name", ""),
                    key="p2_name"
                )
                st.session_state.player2_data["name"] = player2_name
            
            # –§–æ—Ä–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player2_rank = st.number_input(
                "–†–µ–π—Ç–∏–Ω–≥", min_value=1, max_value=1000, 
                value=st.session_state.player2_data["rank"],
                key="p2_rank"
            )
            player2_age = st.number_input(
                "–í–æ–∑—Ä–∞—Å—Ç", min_value=15.0, max_value=50.0, 
                value=st.session_state.player2_data["age"],
                key="p2_age"
            )
            player2_height = st.number_input(
                "–†–æ—Å—Ç (—Å–º)", min_value=150, max_value=220,
                value=st.session_state.player2_data["height"],
                key="p2_height"
            )
            player2_hand = st.selectbox(
                "–ò–≥—Ä–æ–≤–∞—è —Ä—É–∫–∞", options=["right", "left"],
                index=0 if st.session_state.player2_data["hand"] == "right" else 1,
                key="p2_hand"
            )
            player2_wins = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –∑–∞ –≥–æ–¥", min_value=0, max_value=100,
                value=st.session_state.player2_data["wins"],
                key="p2_wins"
            )
            player2_losses = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –≥–æ–¥", min_value=0, max_value=100,
                value=st.session_state.player2_data["losses"],
                key="p2_losses"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            st.session_state.player2_data.update({
                "rank": player2_rank,
                "age": player2_age,
                "height": player2_height,
                "hand": player2_hand,
                "wins": player2_wins,
                "losses": player2_losses
            })
    
    # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ
    with tab3:
        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ")
        
        col1, col2 = st.columns(2)
        with col1:
            surface = st.selectbox(
                "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞",
                options=["clay", "hard", "grass", "carpet"],
                index=0
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—è–º
            surface_info = {
                "clay": "–ì—Ä—É–Ω—Ç–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–æ–µ, –≤—ã—Å–æ–∫–∏–π –æ—Ç—Å–∫–æ–∫ –º—è—á–∞",
                "hard": "–¢–≤–µ—Ä–¥–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å—Ä–µ–¥–Ω–∏–π –æ—Ç—Å–∫–æ–∫",
                "grass": "–¢—Ä–∞–≤—è–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –±—ã—Å—Ç—Ä–æ–µ, –Ω–∏–∑–∫–∏–π –æ—Ç—Å–∫–æ–∫",
                "carpet": "–ö–æ–≤—Ä–æ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –æ–±—ã—á–Ω–æ –≤ –∑–∞–ª–∞—Ö, —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"
            }
            st.info(surface_info[surface])
            
        with col2:
            tournament_level = st.selectbox(
                "–£—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞",
                options=["grand_slam", "masters", "atp500", "atp250", "challenger"],
                index=0
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ç—É—Ä–Ω–∏—Ä–æ–≤
            tournament_info = {
                "grand_slam": "–¢—É—Ä–Ω–∏—Ä—ã –ë–æ–ª—å—à–æ–≥–æ —à–ª–µ–º–∞ - –≤—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å",
                "masters": "–¢—É—Ä–Ω–∏—Ä—ã —Å–µ—Ä–∏–∏ Masters - —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ –ø—Ä–µ—Å—Ç–∏–∂—É –ø–æ—Å–ª–µ –ë–æ–ª—å—à–æ–≥–æ —à–ª–µ–º–∞",
                "atp500": "–¢—É—Ä–Ω–∏—Ä—ã ATP 500 - —Ç—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –ø—Ä–µ—Å—Ç–∏–∂—É",
                "atp250": "–¢—É—Ä–Ω–∏—Ä—ã ATP 250 - —á–µ—Ç–≤–µ—Ä—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ –ø—Ä–µ—Å—Ç–∏–∂—É",
                "challenger": "–¢—É—Ä–Ω–∏—Ä—ã —É—Ä–æ–≤–Ω—è Challenger - –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"
            }
            st.info(tournament_info[tournament_level])
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–ø–æ–¥ –≤—Å–µ–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏)
    if st.button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", type="primary"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        user_info = get_user_info(st.session_state.token)
        if user_info["balance"] < model_costs[selected_model_name]:
            st.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è {model_costs[selected_model_name]} –µ–¥.")
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
            if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
                st.session_state.current_page = "add_funds"
                st.experimental_rerun()
        else:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            prediction_data = {
                "model_id": model_options[selected_model_name],
                "player1_name": player1_name,
                "player2_name": player2_name,
                "player1_rank": player1_rank,
                "player2_rank": player2_rank,
                "player1_age": player1_age,
                "player2_age": player2_age,
                "player1_height_cm": player1_height,
                "player2_height_cm": player2_height,
                "player1_hand": player1_hand,
                "player2_hand": player2_hand,
                "player1_wins_last_year": player1_wins,
                "player2_wins_last_year": player2_wins,
                "player1_losses_last_year": player1_losses,
                "player2_losses_last_year": player2_losses,
                "surface": surface,
                "tournament_level": tournament_level
            }
            
            # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏"):
                st.json(prediction_data)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            with st.spinner("–°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
                result = make_prediction(st.session_state.token, prediction_data)
                if result:
                    st.success("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    display_prediction_results(result, player1_name, player2_name)
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏
                    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"):
                        st.session_state.current_page = "prediction_history"
                        st.experimental_rerun()

def prediction_history_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    st.header("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    predictions = get_predictions(st.session_state.token)
    
    if not predictions:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
            st.session_state.current_page = "new_prediction"
            st.experimental_rerun()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
    models = get_models(st.session_state.token)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    col1, col2, col3 = st.columns(3)
    with col1:
        filter_player = st.text_input("–§–∏–ª—å—Ç—Ä –ø–æ –∏–≥—Ä–æ–∫—É")
    with col2:
        surfaces = ["–í—Å–µ"] + list(set(p["input_data"]["surface"] for p in predictions))
        filter_surface = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é",
            options=surfaces
        )
    with col3:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
            options=["–î–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)", "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)"]
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
    pred_data = []
    for pred in predictions:
        model_name = next((m["name"] for m in models if m["id"] == pred["model_id"]), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = datetime.fromisoformat(pred["created_at"].replace("Z", "+00:00"))
        formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = pred["results"]["predicted_winner"]
        confidence = pred["results"]["confidence"] * 100
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞
        match = f"{pred['input_data']['player1_name']} vs {pred['input_data']['player2_name']}"
        
        # –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–∞
        surface = pred['input_data']['surface']
        
        pred_data.append({
            "ID": pred["id"],
            "–ú–∞—Ç—á": match,
            "–ú–æ–¥–µ–ª—å": model_name,
            "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å": surface,
            "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å": winner,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.1f}%",
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": formatted_date
        })
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_data = pred_data
    if filter_player:
        filtered_data = [p for p in filtered_data if filter_player.lower() in p["–ú–∞—Ç—á"].lower()]
    if filter_surface != "–í—Å–µ":
        filtered_data = [p for p in filtered_data if p["–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å"] == filter_surface]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort_by == "–î–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)":
        filtered_data.sort(key=lambda x: x["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"], reverse=True)
    elif sort_by == "–î–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)":
        filtered_data.sort(key=lambda x: x["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"])
    elif sort_by == "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–±—ã–≤–∞–Ω–∏–µ)":
        filtered_data.sort(key=lambda x: float(x["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"].replace("%", "")), reverse=True)
    elif sort_by == "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ)":
        filtered_data.sort(key=lambda x: float(x["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"].replace("%", "")))
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    if filtered_data:
        df = pd.DataFrame(filtered_data)
        st.dataframe(df, use_container_width=True)
        
        # –í—ã–±–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        selected_pred_id = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            options=df["ID"].tolist(),
            format_func=lambda x: f"–ü—Ä–æ–≥–Ω–æ–∑ #{x}: {df[df['ID'] == x]['–ú–∞—Ç—á'].iloc[0]}"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
        if selected_pred_id:
            selected_pred = next((p for p in predictions if p["id"] == selected_pred_id), None)
            if selected_pred:
                st.subheader(f"–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ #{selected_pred_id}")
                
                # –î–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–æ–∫–∞—Ö
                col1, col2 = st.columns(2)
                with col1:
                    p1 = selected_pred["input_data"]
                    st.subheader(f"{p1['player1_name']}")
                    st.write(f"–†–µ–π—Ç–∏–Ω–≥: {p1['player1_rank']}")
                    st.write(f"–í–æ–∑—Ä–∞—Å—Ç: {p1['player1_age']} –ª–µ—Ç")
                    st.write(f"–†–æ—Å—Ç: {p1['player1_height_cm']} —Å–º")
                    st.write(f"–†—É–∫–∞: {'–ü—Ä–∞–≤–∞—è' if p1['player1_hand'] == 'right' else '–õ–µ–≤–∞—è'}")
                    st.write(f"–ü–æ–±–µ–¥ –∑–∞ –≥–æ–¥: {p1['player1_wins_last_year']}")
                    st.write(f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –≥–æ–¥: {p1['player1_losses_last_year']}")
                    
                    p1_prob = selected_pred["results"]["player1_win_probability"] * 100
                    st.metric(
                        label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã",
                        value=f"{p1_prob:.1f}%"
                    )
                
                with col2:
                    p2 = selected_pred["input_data"]
                    st.subheader(f"{p2['player2_name']}")
                    st.write(f"–†–µ–π—Ç–∏–Ω–≥: {p2['player2_rank']}")
                    st.write(f"–í–æ–∑—Ä–∞—Å—Ç: {p2['player2_age']} –ª–µ—Ç")
                    st.write(f"–†–æ—Å—Ç: {p2['player2_height_cm']} —Å–º")
                    st.write(f"–†—É–∫–∞: {'–ü—Ä–∞–≤–∞—è' if p2['player2_hand'] == 'right' else '–õ–µ–≤–∞—è'}")
                    st.write(f"–ü–æ–±–µ–¥ –∑–∞ –≥–æ–¥: {p2['player2_wins_last_year']}")
                    st.write(f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –≥–æ–¥: {p2['player2_losses_last_year']}")
                    
                    p2_prob = selected_pred["results"]["player2_win_probability"] * 100
                    st.metric(
                        label="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã",
                        value=f"{p2_prob:.1f}%"
                    )
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
                st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ")
                st.write(f"–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ç–∞: {selected_pred['input_data']['surface']}")
                st.write(f"–£—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞: {selected_pred['input_data']['tournament_level']}")
                
                # –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
                display_prediction_results(
                    selected_pred, 
                    selected_pred['input_data']['player1_name'],
                    selected_pred['input_data']['player2_name']
                )
    else:
        st.warning("–ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")

def add_funds_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    st.header("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = get_user_info(st.session_state.token)
    st.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['balance']} –µ–¥.")
    
    with st.form("add_funds_form"):
        st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        amount_options = [10, 50, 100, 200, 500]
        selected_amount = st.radio(
            "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Å—É–º–º—ã:",
            options=amount_options,
            format_func=lambda x: f"{x} –µ–¥."
        )
        
        # –ò–ª–∏ –≤–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
        custom_amount = st.number_input(
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É:",
            min_value=10.0, 
            value=50.0, 
            step=10.0
        )
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        final_amount = custom_amount if custom_amount != 50.0 else selected_amount
        
        payment_method = st.selectbox(
            "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
            options=["–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫", "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"]
        )
        
        # –£—Å–ª–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        if payment_method == "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞":
            st.text_input("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", placeholder="XXXX XXXX XXXX XXXX")
            col1, col2 = st.columns(2)
            with col1:
                st.text_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", placeholder="–ú–ú/–ì–ì")
            with col2:
                st.text_input("CVV", type="password", placeholder="XXX")
        
        elif payment_method == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫":
            st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫",
                options=["–ÆMoney", "WebMoney", "QIWI"]
            )
            st.text_input("–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
        
        elif payment_method == "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥":
            st.info("""
            –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
            - –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –û–û–û "–¢–µ–Ω–Ω–∏—Å ML"
            - –ò–ù–ù: 1234567890
            - –°—á–µ—Ç: 40702810123456789012
            - –ë–∞–Ω–∫: –ê–û "–ü—Ä–æ–≥–Ω–æ–∑-–ë–∞–Ω–∫"
            - –ë–ò–ö: 044525111
            - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        agree = st.checkbox("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã")
        submit = st.form_submit_button("–û–ø–ª–∞—Ç–∏—Ç—å")
        
        if submit:
            if agree:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                result = add_funds(st.session_state.token, final_amount)
                if result:
                    st.success(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result['balance']} –µ–¥.")
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–≥–Ω–æ–∑–∞–º
                    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞"):
                        st.session_state.current_page = "new_prediction"
                        st.experimental_rerun()
            else:
                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã")

def admin_page():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    st.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    
    tab1, tab2 = st.tabs(["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"])
    
    # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
    with tab1:
        st.header("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        models = get_models(st.session_state.token)
        
        if models:
            for model in models:
                with st.expander(f"{model['name']} (–°—Ç–æ–∏–º–æ—Å—Ç—å: {model['cost']} –µ–¥.)"):
                    st.write(f"ID: {model['id']}")
                    st.write(f"–û–ø–∏—Å–∞–Ω–∏–µ: {model.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                    st.write(f"–¢–æ—á–Ω–æ—Å—Ç—å: {model.get('accuracy', 0.8)*100:.1f}%")
                    st.write(f"–°–æ–∑–¥–∞–Ω–∞: {model.get('created_at', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é (–∑–∞–≥–ª—É—à–∫–∏)
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{model['id']}"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                    with col2:
                        if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{model['id']}"):
                            st.warning("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        st.header("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å")
        with st.form("create_model_form"):
            model_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            model_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
            model_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", min_value=1.0, value=10.0)
            model_file = st.file_uploader("–§–∞–π–ª –º–æ–¥–µ–ª–∏", type=["pkl", "h5", "joblib"])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            col1, col2 = st.columns(2)
            with col1:
                model_accuracy = st.slider("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏", min_value=0.5, max_value=1.0, value=0.8, step=0.01)
            with col2:
                model_type = st.selectbox(
                    "–¢–∏–ø –º–æ–¥–µ–ª–∏",
                    options=["classification", "regression", "ensemble"]
                )
            
            submit = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å")
            
            if submit and model_name and model_cost:
                if not model_file:
                    st.warning("–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω. –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
                model_data = {
                    "name": model_name,
                    "description": model_description,
                    "cost": model_cost,
                    "accuracy": model_accuracy,
                    "type": model_type,
                }
                
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
                # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤–µ–º API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                result = create_model(st.session_state.token, model_data)
                if result:
                    st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    st.experimental_rerun()
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
    
    # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
    with tab2:
        st.info("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
        # –ú–∞–∫–µ—Ç –±—É–¥—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        st.subheader("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "42")
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü", "28", "+5")
        with col3:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", "156", "+12")
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        chart_data = pd.DataFrame({
            "–î–∞—Ç–∞": pd.date_range(start="2023-01-01", periods=30),
            "–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": [2, 1, 3, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1, 3, 1, 0, 2, 1, 0, 1, 2, 3, 1, 1, 0, 2, 1, 0, 1, 2],
            "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è": [5, 8, 12, 7, 9, 11, 6, 8, 7, 10, 5, 9, 8, 15, 12, 7, 9, 8, 6, 10, 11, 14, 9, 8, 7, 12, 10, 8, 9, 11]
        })
        chart_data = chart_data.set_index("–î–∞—Ç–∞")
        st.line_chart(chart_data)
        
        st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        st.info("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False
    
    if "token" not in st.session_state:
        st.session_state.token = None
    
    if "current_page" not in st.session_state:
        st.session_state.current_page = "login" if not st.session_state.logged_in else "dashboard"
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    if st.session_state.logged_in:
        with st.sidebar:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = get_user_info(st.session_state.token)
            if not user_info:
                st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
                st.session_state.logged_in = False
                st.session_state.token = None
                st.session_state.current_page = "login"
                st.experimental_rerun()
                return
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            st.image("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y", width=100)
            st.subheader(f"–ü—Ä–∏–≤–µ—Ç, {user_info['name']}!")
            st.write(f"**Email:** {user_info['email']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
            balance_color = "green" if user_info['balance'] > 50 else "orange" if user_info['balance'] > 20 else "red"
            st.markdown(
                f"<div style='padding: 10px; background-color: #f0f8ff; border-radius: 5px;'>"
                f"<p style='margin: 0;'>–ë–∞–ª–∞–Ω—Å:</p>"
                f"<h3 style='margin: 0; color: {balance_color};'>{user_info['balance']} –µ–¥.</h3>"
                f"</div>",
                unsafe_allow_html=True
            )
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
            st.subheader("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
            if st.button("üè† –ì–ª–∞–≤–Ω–∞—è", key="nav_home"):
                st.session_state.current_page = "dashboard"
                st.experimental_rerun()
            
            if st.button("üßÆ –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", key="nav_predict"):
                st.session_state.current_page = "new_prediction"
                st.experimental_rerun()
            
            if st.button("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", key="nav_history"):
                st.session_state.current_page = "prediction_history"
                st.experimental_rerun()
            
            if st.button("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", key="nav_funds"):
                st.session_state.current_page = "add_funds"
                st.experimental_rerun()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if user_info.get("is_admin", False):
                st.subheader("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
                if st.button("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏", key="nav_admin"):
                    st.session_state.current_page = "admin"
                    st.experimental_rerun()
            
            # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤–Ω–∏–∑—É —Å–∞–π–¥–±–∞—Ä–∞
            st.markdown("---")
            if st.button("üö™ –í—ã–π—Ç–∏", key="nav_logout"):
                st.session_state.logged_in = False
                st.session_state.token = None
                st.session_state.current_page = "login"
                st.experimental_rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if not st.session_state.logged_in:
        login_page()
    else:
        # –®–∞–ø–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.title("üéæ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if st.session_state.current_page == "dashboard":
            dashboard_page()
        elif st.session_state.current_page == "new_prediction":
            new_prediction_page()
        elif st.session_state.current_page == "prediction_history":
            prediction_history_page()
        elif st.session_state.current_page == "add_funds":
            add_funds_page()
        elif st.session_state.current_page == "admin" and user_info.get("is_admin", False):
            admin_page()
        else:
            st.session_state.current_page = "dashboard"
            st.experimental_rerun()

if __name__ == "__main__":
    main()